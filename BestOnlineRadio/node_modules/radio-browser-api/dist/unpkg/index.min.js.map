{"version":3,"file":"index.min.js","sources":["../../src/constants.ts","../../src/radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  // eslint-disable-next-line\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Object\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    if (typeof window !== 'undefined') {\n      return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        tags: [...new Set(response.tags.split(','))].filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${key}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n"],"names":["StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","appName","hideBroken","baseUrl","fetchConfig","method","redirect","Error","headers","this","config","window","ip","name","fetch","response","ok","json","result","url","search","query","runRequest","buildRequest","toUpperCase","country","language","tag","toLowerCase","searchType","removeDuplicates","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","homepage","favicon","countryCode","countrycode","state","votes","codec","bitrate","clickCount","clickcount","clickTrend","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastCheckTime","lastchecktime","tags","_toConsumableArray","Set","filter","length","push","undefined","limit","resolveGetStations","ids","stationsIds","join","endPoint","limitStations","queryCopy","addHideBrokenParam","encodeURIComponent","Array","isArray","tagList","queryParams","createQueryParams","finalConfig","resolveBaseUrl","results","random","Math","floor","params","Object","entries","key","value","slice","version","lastCheckOK","clickTimeStamp"],"mappings":"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"}