{"version":3,"file":"index.esm.min.js","sources":["../../src/constants.ts","../../src/radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  // eslint-disable-next-line\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Object\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    if (typeof window !== 'undefined') {\n      return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        tags: [...new Set(response.tags.split(','))].filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${key}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n"],"names":["StationSearchOrder","name","url","homepage","favicon","tags","country","state","language","votes","codec","bitrate","lastCheckOK","lastCheckTime","clickTimeStamp","clickCount","clickTrend","random","StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","constructor","appName","hideBroken","baseUrl","fetchConfig","method","redirect","Error","headers","this","resolveBaseUrl","config","window","ip","response","fetch","ok","json","setBaseUrl","getBaseUrl","getCountries","search","query","_this","runRequest","buildRequest","getCountryCodes","toUpperCase","_this2","getCodecs","_this3","getCountryStates","_this4","getLanguages","_this5","getTags","tag","toLowerCase","_this6","getStationsBy","searchType","removeDuplicates","stations","_this7","normalizeStations","result","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","countryCode","countrycode","clickcount","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastchecktime","Set","filter","length","push","getAllStations","_this8","searchStations","_this9","undefined","getStationsByClicks","limit","_this10","resolveGetStations","getStationsByVotes","_this11","getStationsByRecentClicks","_this12","sendStationClick","_this13","voteForStation","_this14","getStationsById","ids","stationsIds","join","_this15","getStationByUrl","_this16","endPoint","limitStations","_this17","queryCopy","addHideBrokenParam","encodeURIComponent","Array","isArray","tagList","queryParams","createQueryParams","finalConfig","_this18","results","Math","floor","params","key","value","Object","entries","slice","version"],"mappings":"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"}