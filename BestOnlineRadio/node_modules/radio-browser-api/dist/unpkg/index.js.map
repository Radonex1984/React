{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  // eslint-disable-next-line\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Object\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    if (typeof window !== 'undefined') {\n      return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        tags: [...new Set(response.tags.split(','))].filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${key}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n"],"names":["StationSearchOrder","name","url","homepage","favicon","tags","country","state","language","votes","codec","bitrate","lastCheckOK","lastCheckTime","clickTimeStamp","clickCount","clickTrend","random","StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","appName","hideBroken","baseUrl","fetchConfig","method","redirect","Error","headers","config","window","ip","fetch","response","ok","json","result","search","query","runRequest","buildRequest","toUpperCase","tag","toLowerCase","searchType","removeDuplicates","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","countryCode","countrycode","clickcount","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastchecktime","Set","filter","length","push","undefined","limit","resolveGetStations","ids","stationsIds","join","endPoint","limitStations","addHideBrokenParam","encodeURIComponent","queryCopy","Array","isArray","tagList","queryParams","createQueryParams","finalConfig","resolveBaseUrl","results","Math","floor","params","Object","entries","key","value","slice","version"],"mappings":"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"}