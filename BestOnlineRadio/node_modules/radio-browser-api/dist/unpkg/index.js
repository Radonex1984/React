(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.index = {}));
}(this, (function (exports) { 'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  /**
   * @public
   */
  var StationSearchOrder = {
    name: 'name',
    url: 'url',
    homepage: 'homepage',
    favicon: 'favicon',
    tags: 'tags',
    country: 'country',
    state: 'state',
    language: 'language',
    votes: 'votes',
    codec: 'codec',
    bitrate: 'bitrate',
    lastCheckOK: 'lastCheckOK',
    lastCheckTime: 'lastCheckTime',
    clickTimeStamp: 'clickTimeStamp',
    clickCount: 'clickCount',
    clickTrend: 'clickTrend',
    random: 'random'
  };
  /**
   * @public
   */

  var StationSearchType = {
    byUuid: 'byUuid',
    byName: 'byName',
    byNameExact: 'byNameExact',
    byCodec: 'byCodec',
    byCodexExact: 'byCodecExact',
    byCountry: 'byCountry',
    byCountryExact: 'byCountryExact',
    byCountryCodeExact: 'byCountryCodeExact',
    byState: 'byState',
    byStateExact: 'byStateExact',
    byLanguage: 'byLanguage',
    byLanguageExact: 'byLanguageExact',
    byTag: 'byTag',
    byTagExact: 'byTagExact'
  };
  /**
   * @public
   */

  /**
   * Query the radio browser api.
   * @public
   */

  var RadioBrowserApi = /*#__PURE__*/function () {
    /**
     * Creates an instance of radio browser api.
     * @param appName - App name to be used as user agent header to indentify the calls to the API
     * @param hideBroken - Hide broken stations for all future API calls
     */
    function RadioBrowserApi(appName, hideBroken = true) {
      _classCallCheck(this, RadioBrowserApi);

      this.baseUrl = void 0;
      this.fetchConfig = {
        method: 'GET',
        redirect: 'follow'
      };

      if (!appName) {
        throw new Error('appName is required');
      }

      this.fetchConfig.headers = {
        'user-agent': this.appName
      };
    }
    /**
     * Resolves API base url this will be the default for all class instances.
     * @param autoSet - Automatically set first resolved base url
     * @param config-  Fetch configuration
     * @returns Array of objects with the ip and name of the api server
     */


    _createClass(RadioBrowserApi, [{
      key: "resolveBaseUrl",
      value: function () {
        var _resolveBaseUrl = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var config,
              result,
              response,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};

                  if (!(typeof window !== 'undefined')) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return", [{
                    ip: '45.77.62.161',
                    name: 'fr1.api.radio-browser.info'
                  }]);

                case 3:
                  _context.next = 5;
                  return fetch( // this should be https when the above issue is resolved
                  'http://all.api.radio-browser.info/json/servers', config);

                case 5:
                  response = _context.sent;

                  if (!response.ok) {
                    _context.next = 13;
                    break;
                  }

                  _context.next = 9;
                  return response.json();

                case 9:
                  result = _context.sent;
                  return _context.abrupt("return", result);

                case 13:
                  throw response;

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function resolveBaseUrl() {
          return _resolveBaseUrl.apply(this, arguments);
        }

        return resolveBaseUrl;
      }()
      /**
       * Sets base url for all api calls
       * @param url - Url to the api server
       */

    }, {
      key: "setBaseUrl",
      value: function setBaseUrl(url) {
        this.baseUrl = url;
      }
      /**
       * Get current  base url
       * @returns Base url
       */

    }, {
      key: "getBaseUrl",
      value: function getBaseUrl() {
        return this.baseUrl;
      }
      /**
       * Gets available countries
       * @param search - Search for country
       * @param query - Query params
       * @param fetchConfig - Fetch configuration
       * @returns Array of country results with the name of the station and station count
       */

    }, {
      key: "getCountries",
      value: function () {
        var _getCountries = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(search, query, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.runRequest(this.buildRequest('countries', search, query), fetchConfig));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getCountries(_x, _x2, _x3) {
          return _getCountries.apply(this, arguments);
        }

        return getCountries;
      }()
      /**
       * Gets countries by country code
       * @param search - Country code
       * @param query  - Query
       * @param fetchConfig - Fetch configuration
       * @returns Array of country results with the name of the station and station count
       */

    }, {
      key: "getCountryCodes",
      value: function () {
        var _getCountryCodes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(search, query, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  search = search ? "".concat(search.toUpperCase()) : '';
                  return _context3.abrupt("return", this.runRequest(this.buildRequest('countrycodes', search, query), fetchConfig));

                case 2:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function getCountryCodes(_x4, _x5, _x6) {
          return _getCountryCodes.apply(this, arguments);
        }

        return getCountryCodes;
      }()
      /**
       * Gets available codes
       * @param query - Query
       * @param fetchConfig -  Fetch configuration
       * @returns List of available codes
       */

    }, {
      key: "getCodecs",
      value: function () {
        var _getCodecs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(query, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", this.runRequest(this.buildRequest('codecs', '', query), fetchConfig));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getCodecs(_x7, _x8) {
          return _getCodecs.apply(this, arguments);
        }

        return getCodecs;
      }()
      /**
       * Gets country states. States **should** be regions inside a country.
       * @param country - Limit state to particular country
       * @param query - Query
       * @param fetchConfig - Fetch configuration
       * @returns Array of country states
       */

    }, {
      key: "getCountryStates",
      value: function () {
        var _getCountryStates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(country, query, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.abrupt("return", this.runRequest(this.buildRequest('states', country, query), fetchConfig));

                case 1:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getCountryStates(_x9, _x10, _x11) {
          return _getCountryStates.apply(this, arguments);
        }

        return getCountryStates;
      }()
      /**
       * Gets all available languages
       * @param language- Limit results to particular language
       * @param query -  Query
       * @param fetchConfig - Fetch configuration
       * @returns Array of language results
       */

    }, {
      key: "getLanguages",
      value: function () {
        var _getLanguages = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(language, query, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  return _context6.abrupt("return", this.runRequest(this.buildRequest('languages', language, query), fetchConfig));

                case 1:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getLanguages(_x12, _x13, _x14) {
          return _getLanguages.apply(this, arguments);
        }

        return getLanguages;
      }()
      /**
       * Gets all available tags
       * @param tag - Limit results to particular tag
       * @param query - Query
       * @param fetchConfig - Fetch configuration
       * @returns List of tag results
       */

    }, {
      key: "getTags",
      value: function () {
        var _getTags = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(tag, query, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  tag = tag ? tag.toLowerCase() : ''; // empty string returns all tags

                  return _context7.abrupt("return", this.runRequest(this.buildRequest('tags', tag, query), fetchConfig));

                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function getTags(_x15, _x16, _x17) {
          return _getTags.apply(this, arguments);
        }

        return getTags;
      }()
      /**
       * Gets stations by various available parameters
       * @param searchType - Parameter for the search
       * @param search - Search value for the parameter
       * @param query - Query
       * @param fetchConfig - Fetch configuration
       * @param removeDuplicates - remove duplicate stations
       * @returns Array of station results
       */

    }, {
      key: "getStationsBy",
      value: function () {
        var _getStationsBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(searchType, search, query, fetchConfig) {
          var removeDuplicates,
              stations,
              _args8 = arguments;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  removeDuplicates = _args8.length > 4 && _args8[4] !== undefined ? _args8[4] : false;

                  if (StationSearchType[searchType]) {
                    _context8.next = 3;
                    break;
                  }

                  throw new Error("search type does not exist: ".concat(searchType));

                case 3:
                  search = search ? search.toLowerCase() : ''; // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}

                  _context8.next = 6;
                  return this.runRequest(this.buildRequest("stations/".concat(searchType.toLowerCase()), search, query), fetchConfig);

                case 6:
                  stations = _context8.sent;
                  return _context8.abrupt("return", this.normalizeStations(stations, removeDuplicates));

                case 8:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function getStationsBy(_x18, _x19, _x20, _x21) {
          return _getStationsBy.apply(this, arguments);
        }

        return getStationsBy;
      }()
      /**
       * Normalizes stations from the API response
       * @param stations - Array of station responses
       * @param removeDuplicates - remove duplicate stations
       * @returns Array of normalized stations
       */

    }, {
      key: "normalizeStations",
      value: function normalizeStations(stations) {
        var removeDuplicates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var result = [];
        var duplicates = {};

        var _iterator = _createForOfIteratorHelper(stations),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var response = _step.value;

            if (removeDuplicates) {
              var nameAndUrl = "".concat(response.name.toLowerCase().trim()).concat(response.url.toLowerCase().trim()); // guard against results having the same stations under different id's

              if (duplicates[nameAndUrl]) continue;
              duplicates[nameAndUrl] = true;
            }

            var station = {
              changeId: response.changeuuid,
              id: response.stationuuid,
              name: response.name,
              url: response.url,
              urlResolved: response.url_resolved,
              homepage: response.homepage,
              favicon: response.favicon,
              country: response.country,
              countryCode: response.countrycode,
              state: response.state,
              votes: response.votes,
              codec: response.codec,
              bitrate: response.bitrate,
              clickCount: response.clickcount,
              clickTrend: response.clicktrend,
              hls: Boolean(response.hls),
              lastCheckOk: Boolean(response.lastcheckok),
              lastChangeTime: new Date(response.lastchangetime),
              lastCheckOkTime: new Date(response.lastcheckoktime),
              clickTimestamp: new Date(response.clicktimestamp),
              lastLocalCheckTime: new Date(response.lastlocalchecktime),
              language: response.language.split(','),
              lastCheckTime: new Date(response.lastchecktime),
              tags: _toConsumableArray(new Set(response.tags.split(','))).filter(function (tag) {
                return tag.length > 0 && tag.length < 10;
              }) // drop duplicates and tags over 10 characters

            };
            result.push(station);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return result;
      }
      /**
       * Gets all available stations. Please note that if results
       * are not limited somehow, they can be huge (size in MB)
       * @param query - Query
       * @param fetchConfig - Fetch configuration
       * @param removeDuplicates - remove duplicate stations
       * @returns Array of all available stations
       */

    }, {
      key: "getAllStations",
      value: function () {
        var _getAllStations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(query, fetchConfig) {
          var removeDuplicates,
              stations,
              _args9 = arguments;
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  removeDuplicates = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : false;
                  _context9.next = 3;
                  return this.runRequest(this.buildRequest('stations', '', query), fetchConfig);

                case 3:
                  stations = _context9.sent;
                  return _context9.abrupt("return", this.normalizeStations(stations, removeDuplicates));

                case 5:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function getAllStations(_x22, _x23) {
          return _getAllStations.apply(this, arguments);
        }

        return getAllStations;
      }()
      /**
       * Searches stations by particular params
       * @param query - Query
       * @param fetchConfig - Fetch configuration
       * @param removeDuplicates - remove duplicate stations
       * @returns Array of station results
       */

    }, {
      key: "searchStations",
      value: function () {
        var _searchStations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(query, fetchConfig) {
          var removeDuplicates,
              stations,
              _args10 = arguments;
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  removeDuplicates = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : false;
                  _context10.next = 3;
                  return this.runRequest(this.buildRequest('stations/search', undefined, query), fetchConfig);

                case 3:
                  stations = _context10.sent;
                  return _context10.abrupt("return", this.normalizeStations(stations, removeDuplicates));

                case 5:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function searchStations(_x24, _x25) {
          return _searchStations.apply(this, arguments);
        }

        return searchStations;
      }()
      /**
       * Gets stations by clicks. Stations with the highest number of clicks are most popular
       * @param limit - Limit the number of returned stations
       * @param fetchConfig - Fetch configuration
       * @returns Array of stations
       */

    }, {
      key: "getStationsByClicks",
      value: function () {
        var _getStationsByClicks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(limit, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  return _context11.abrupt("return", this.resolveGetStations('topclick', limit, fetchConfig));

                case 1:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function getStationsByClicks(_x26, _x27) {
          return _getStationsByClicks.apply(this, arguments);
        }

        return getStationsByClicks;
      }()
      /**
       * Gets stations by votes. Returns most voted stations
       * @param limit - Limit the number of returned stations
       * @param fetchConfig - Fetch configuration
       * @returns Array of stations
       */

    }, {
      key: "getStationsByVotes",
      value: function () {
        var _getStationsByVotes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(limit, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  return _context12.abrupt("return", this.resolveGetStations('topvote', limit, fetchConfig));

                case 1:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function getStationsByVotes(_x28, _x29) {
          return _getStationsByVotes.apply(this, arguments);
        }

        return getStationsByVotes;
      }()
      /**
       * Gets stations by recent clicks. They are basically most recently listened stations.
       * @param limit - Limit the number of returned stations
       * @param fetchConfig - Fetch configuration
       * @returns Array of stations
       */

    }, {
      key: "getStationsByRecentClicks",
      value: function () {
        var _getStationsByRecentClicks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(limit, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  return _context13.abrupt("return", this.resolveGetStations('lastclick', limit, fetchConfig));

                case 1:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function getStationsByRecentClicks(_x30, _x31) {
          return _getStationsByRecentClicks.apply(this, arguments);
        }

        return getStationsByRecentClicks;
      }()
      /**
       * Sends click for the station. This method should be used when user starts to listen to the station.
       * @param id - Station id
       * @param fetchConfig  - Fetch configuration
       * @returns Station click object
       */

    }, {
      key: "sendStationClick",
      value: function () {
        var _sendStationClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(id, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  return _context14.abrupt("return", this.runRequest(this.buildRequest('url', id, undefined, false), fetchConfig));

                case 1:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function sendStationClick(_x32, _x33) {
          return _sendStationClick.apply(this, arguments);
        }

        return sendStationClick;
      }()
      /**
       * Votes for station. This method should be used when user adds the station to favourites etc..
       * @param id - Station id
       * @param fetchConfig - Fetch configuration
       * @returns Station vote object
       */

    }, {
      key: "voteForStation",
      value: function () {
        var _voteForStation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(id, fetchConfig) {
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  return _context15.abrupt("return", this.runRequest(this.buildRequest('vote', id), fetchConfig));

                case 1:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function voteForStation(_x34, _x35) {
          return _voteForStation.apply(this, arguments);
        }

        return voteForStation;
      }()
      /**
       * Gets stations by station id
       * @param ids - Array of station id's
       * @param fetchConfig - Fetch configuration
       * @returns Array of stations
       */

    }, {
      key: "getStationsById",
      value: function () {
        var _getStationsById = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(ids, fetchConfig) {
          var stationsIds, stations;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  stationsIds = ids.join(',');
                  _context16.next = 3;
                  return this.runRequest(this.buildRequest("stations/byuuid?uuids=".concat(stationsIds), undefined, undefined, false), fetchConfig);

                case 3:
                  stations = _context16.sent;
                  return _context16.abrupt("return", this.normalizeStations(stations));

                case 5:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function getStationsById(_x36, _x37) {
          return _getStationsById.apply(this, arguments);
        }

        return getStationsById;
      }()
      /**
       * Gets station by station url
       * @param url - Station url
       * @param fetchConfig - Fetch configuration
       * @returns Array of stations
       */

    }, {
      key: "getStationByUrl",
      value: function () {
        var _getStationByUrl = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(url, fetchConfig) {
          var stations;
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  _context17.next = 2;
                  return this.runRequest(this.buildRequest("stations/byurl/".concat(url), undefined, undefined, false), fetchConfig);

                case 2:
                  stations = _context17.sent;
                  return _context17.abrupt("return", this.normalizeStations(stations));

                case 4:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function getStationByUrl(_x38, _x39) {
          return _getStationByUrl.apply(this, arguments);
        }

        return getStationByUrl;
      }()
    }, {
      key: "resolveGetStations",
      value: function () {
        var _resolveGetStations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(endPoint, limit, fetchConfig) {
          var limitStations, stations;
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  limitStations = limit ? "/".concat(limit) : '';
                  _context18.next = 3;
                  return this.runRequest(this.buildRequest("stations/".concat(endPoint).concat(limitStations), undefined, undefined, false), fetchConfig);

                case 3:
                  stations = _context18.sent;
                  return _context18.abrupt("return", this.normalizeStations(stations));

                case 5:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function resolveGetStations(_x40, _x41, _x42) {
          return _resolveGetStations.apply(this, arguments);
        }

        return resolveGetStations;
      }()
      /**
       * Builds request to the API
       * @param endPoint - API endpoint
       * @param search - Search term
       * @param query - Query
       * @param addHideBrokenParam - Hide broken stations from the results
       * @returns Built request string
       */

    }, {
      key: "buildRequest",
      value: function buildRequest(endPoint, search, query) {
        var addHideBrokenParam = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        search = search ? "/".concat(encodeURIComponent(search)) : '';
        var queryCopy;

        if (query) {
          queryCopy = _objectSpread2({}, query);

          if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {
            queryCopy.tagList = _toConsumableArray(queryCopy.tagList);
          }

          if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {
            queryCopy.hideBroken = this.hideBroken;
          }
        }

        var queryParams = queryCopy ? this.createQueryParams(queryCopy) : '';
        return "".concat(endPoint).concat(search).concat(queryParams);
      }
      /**
       * Fires of the request to the API
       * @param url - Request url
       * @param fetchConfig - Fetch configuration
       * @returns Fetch response
       */

    }, {
      key: "runRequest",
      value: function () {
        var _runRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(url) {
          var fetchConfig,
              finalConfig,
              results,
              random,
              response,
              _args19 = arguments;
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  fetchConfig = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
                  finalConfig = _objectSpread2(_objectSpread2(_objectSpread2({}, this.fetchConfig), fetchConfig), {}, {
                    headers: _objectSpread2(_objectSpread2({}, this.fetchConfig.headers), fetchConfig.headers)
                  });

                  if (this.baseUrl) {
                    _context19.next = 8;
                    break;
                  }

                  _context19.next = 5;
                  return this.resolveBaseUrl();

                case 5:
                  results = _context19.sent;
                  random = Math.floor(Math.random() * results.length);
                  this.baseUrl = "https://".concat(results[random].name);

                case 8:
                  _context19.next = 10;
                  return fetch("".concat(this.baseUrl, "/json/").concat(url), finalConfig);

                case 10:
                  response = _context19.sent;

                  if (!response.ok) {
                    _context19.next = 15;
                    break;
                  }

                  return _context19.abrupt("return", response.json());

                case 15:
                  throw response;

                case 16:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function runRequest(_x43) {
          return _runRequest.apply(this, arguments);
        }

        return runRequest;
      }()
      /**
       * Encodes query parameters
       * @param params - Object that represents paramters as key value pairs
       * @returns  String of encoded query parameters
       */

    }, {
      key: "createQueryParams",
      value: function createQueryParams(params) {
        var result = '';

        if (params) {
          for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                _key = _Object$entries$_i[0],
                value = _Object$entries$_i[1];

            result += "&".concat(_key, "=").concat(encodeURIComponent(value));
          }
        }

        return result ? "?".concat(result.slice(1).toLowerCase()) : '';
      }
    }]);

    return RadioBrowserApi;
  }();
  RadioBrowserApi.version = "5.0.0";

  exports.RadioBrowserApi = RadioBrowserApi;
  exports.StationSearchOrder = StationSearchOrder;
  exports.StationSearchType = StationSearchType;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
