{"version":3,"file":"index.esm.js","sources":["../../src/constants.ts","../../src/radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  // eslint-disable-next-line\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Object\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    if (typeof window !== 'undefined') {\n      return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        tags: [...new Set(response.tags.split(','))].filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${key}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n"],"names":["StationSearchOrder","name","url","homepage","favicon","tags","country","state","language","votes","codec","bitrate","lastCheckOK","lastCheckTime","clickTimeStamp","clickCount","clickTrend","random","StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","constructor","appName","hideBroken","baseUrl","fetchConfig","method","redirect","Error","headers","resolveBaseUrl","config","result","window","ip","response","fetch","ok","json","setBaseUrl","getBaseUrl","getCountries","search","query","runRequest","buildRequest","getCountryCodes","toUpperCase","getCodecs","getCountryStates","getLanguages","getTags","tag","toLowerCase","getStationsBy","searchType","removeDuplicates","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","countryCode","countrycode","clickcount","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastchecktime","Set","filter","length","push","getAllStations","searchStations","undefined","getStationsByClicks","limit","resolveGetStations","getStationsByVotes","getStationsByRecentClicks","sendStationClick","voteForStation","getStationsById","ids","stationsIds","join","getStationByUrl","endPoint","limitStations","addHideBrokenParam","encodeURIComponent","queryCopy","Array","isArray","tagList","queryParams","createQueryParams","finalConfig","results","Math","floor","params","key","value","Object","entries","slice","version"],"mappings":"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"}