{"version":3,"sources":["../../src/radioBrowser.ts"],"names":["RadioBrowserApi","constructor","appName","hideBroken","baseUrl","fetchConfig","method","redirect","Error","headers","resolveBaseUrl","config","result","window","ip","name","response","fetch","ok","json","setBaseUrl","url","getBaseUrl","getCountries","search","query","runRequest","buildRequest","getCountryCodes","toUpperCase","getCodecs","getCountryStates","country","getLanguages","language","getTags","tag","toLowerCase","getStationsBy","searchType","removeDuplicates","StationSearchType","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","homepage","favicon","countryCode","countrycode","state","votes","codec","bitrate","clickCount","clickcount","clickTrend","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastCheckTime","lastchecktime","tags","Set","filter","length","push","getAllStations","searchStations","undefined","getStationsByClicks","limit","resolveGetStations","getStationsByVotes","getStationsByRecentClicks","sendStationClick","voteForStation","getStationsById","ids","stationsIds","join","getStationByUrl","endPoint","limitStations","addHideBrokenParam","encodeURIComponent","queryCopy","Array","isArray","tagList","queryParams","createQueryParams","finalConfig","results","random","Math","floor","params","key","value","Object","entries","slice","version"],"mappings":"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","sourcesContent":["import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    if (typeof window !== 'undefined') {\n      return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        tags: [...new Set(response.tags.split(','))].filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${key}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n"],"file":"radioBrowser.js"}